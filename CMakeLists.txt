cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
cmake_policy(SET CMP0054 OLD)
cmake_policy(SET CMP0045 OLD)

project(ucc C)
set(CMAKE_C_STANDARD 90)
set(${PROJECT_NAME}_VENDOR "uael")
set(${PROJECT_NAME}_CONTACT "github.com/uael/ucc/issues")
set(${PROJECT_NAME}_SUMMARY "uael Cross-Compiler c header module")
set(${PROJECT_NAME}_MAJOR 0)
set(${PROJECT_NAME}_MINOR 1)
set(${PROJECT_NAME}_PATCH 0)
set(${PROJECT_NAME}_README README.md)
set(${PROJECT_NAME}_LICENSE LICENSE)
set(${PROJECT_NAME}_INCLUDE_DIR ${CMAKE_CURRENT_LIST_DIR}/include)
set(${PROJECT_NAME}_TEST_DIR ${CMAKE_CURRENT_LIST_DIR}/test)

get_directory_property(${PROJECT_NAME}_PARENT PARENT_DIRECTORY)
if (NOT ${PROJECT_NAME}_PARENT)
  set(${PROJECT_NAME}_DEVEL TRUE)
endif ()

set(${PROJECT_NAME}_HEADERS)
set(${PROJECT_NAME}_SOURCES)

if (EXISTS ${${PROJECT_NAME}_INCLUDE_DIR})
  file(GLOB_RECURSE ${PROJECT_NAME}_HEADERS ${${PROJECT_NAME}_HEADERS} ${${PROJECT_NAME}_INCLUDE_DIR}/${PROJECT_NAME}/*.h)
  file(GLOB ${PROJECT_NAME}_MODULES ${${PROJECT_NAME}_MODULES} ${${PROJECT_NAME}_INCLUDE_DIR}/*/)
  foreach (MODULE ${${PROJECT_NAME}_MODULES})
    file(GLOB_RECURSE ${PROJECT_NAME}_HEADERS ${${PROJECT_NAME}_HEADERS} ${MODULE}/*.h)
  endforeach ()
endif ()

if (EXISTS ${${PROJECT_NAME}_INCLUDE_DIR}/${PROJECT_NAME}.h)
  set(${PROJECT_NAME}_HEADER ${${PROJECT_NAME}_INCLUDE_DIR}/${PROJECT_NAME}.h)
else ()
  set(${PROJECT_NAME}_HEADER)
endif ()

add_library(${PROJECT_NAME} INTERFACE)

if (EXISTS ${${PROJECT_NAME}_INCLUDE_DIR})
  target_include_directories(${PROJECT_NAME} INTERFACE ${${PROJECT_NAME}_INCLUDE_DIR})
endif ()

if (${PROJECT_NAME}_DEVEL)
  if (EXISTS ${${PROJECT_NAME}_TEST_DIR})
    enable_testing()

    file(GLOB ${PROJECT_NAME}_TESTS ${${PROJECT_NAME}_TESTS} ${${PROJECT_NAME}_TEST_DIR}/*/)
    foreach (TEST ${${PROJECT_NAME}_TESTS})
      if (IS_DIRECTORY ${TEST})
        get_filename_component(TEST_NAME ${TEST} NAME_WE)
        file(GLOB ${TEST_NAME}_SRCS ${${TEST_NAME}_SRCS} ${TEST}/*.c)
        add_executable(test_${TEST_NAME} ${${TEST_NAME}_SRCS})
        add_dependencies(test_${TEST_NAME} ${PROJECT_NAME})
        target_include_directories(test_${TEST_NAME} PRIVATE ${${PROJECT_NAME}_TEST_DIR})
        target_link_libraries(test_${TEST_NAME} ${PROJECT_NAME})
        if (${PROJECT_NAME}_TEST_DEPS)
          foreach (DEP ${${PROJECT_NAME}_TEST_DEPS})
            add_dependencies(test_${TEST_NAME} ${DEP})
            if (${DEP}_LINK)
              target_link_libraries(test_${TEST_NAME} ${DEP})
            endif ()
          endforeach ()
        endif ()
        add_test(${TEST_NAME} test_${TEST_NAME})
      endif ()
    endforeach ()
  endif ()
endif ()

install(TARGETS ${PROJECT_NAME}
  RUNTIME DESTINATION bin
  ARCHIVE DESTINATION lib
  PUBLIC_HEADER DESTINATION include/${PROJECT_NAME})
if (EXISTS ${${PROJECT_NAME}_INCLUDE_DIR}/${PROJECT_NAME}.h)
  install(FILES ${${PROJECT_NAME}_INCLUDE_DIR}/${PROJECT_NAME}.h
    DESTINATION include)
endif ()
